* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
UART_HandleTypeDef huart2;
UART_HandleTypeDef huart3;

/* USER CODE BEGIN PV */
char temp[3];
int leerP1 = 0; // Variable para ver cuando el botón 1 se presiona
int leerP2 = 0; // Variable para ver cuando el botón 2 se presiona
uint8_t buffer[3]; // Variable para guardar la información recibida
char pot1; // Valor del potenciómetro 1
char pot2; // Valor del potenciómetro 2
int numero1;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART3_UART_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */
void desplegarDisplay(int numero); // Función para mostrar el valor en el display de 7 segmentos
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART3_UART_Init();
  MX_USART2_UART_Init();
  /* USER CODE BEGIN 2 */
  uint8_t Test[]="Hola mundo!\r\n";//data send
  //función bloqueante
  HAL_UART_Transmit(&huart2,Test,sizeof(Test),100);//sending in normal mode
  //HAL_UART_Receive_IT(&huart2,buffer,1);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {if (leerP1 == 1) { // Si se detecta que se presionó el botón 1
    leerP1 = 0; // Reinicia la variable para evitar lecturas duplicadas

    // Recibe datos desde el ESP32 mediante UART (puerto huart3) 
    // y almacena la información en el buffer. HAL_MAX_DELAY asegura que la 
    // función esperará indefinidamente hasta recibir los datos.
    HAL_UART_Receive(&huart3, buffer, sizeof(buffer), HAL_MAX_DELAY);

    // Asigna los valores recibidos al potenciómetro 1 y 2.
    // buffer[1] y buffer[0] corresponden a las posiciones del arreglo recibidas.
    pot1 = buffer[1]; 
    pot2 = buffer[0];

    // Transmite el contenido del buffer al puerto UART (huart2) para monitoreo o depuración.
    HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), 100);

    // Enciende el LED1 para indicar que el botón 1 está activo.
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);

    // Apaga el LED4 para indicar que el otro display no está activo.
    HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);

    // Envía el valor del potenciómetro 1 al display.
    // La operación `pot1 - 0` no cambia el valor, pero asegura que sea un entero.
    numero1 = pot1 - 0;
    display(numero1); // Muestra el valor en el display.
}

if (leerP2 == 1) { // Si se detecta que se presionó el botón 2
    leerP2 = 0; // Reinicia la variable para evitar lecturas duplicadas

    // Envía el contenido del buffer a través del puerto UART (huart2) para monito

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
  huart3.Init.BaudRate = 115200;
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart3) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LEDc_Pin|LEDd_Pin|LEDe_Pin|LED1_Pin
                          |LED4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LEDg_GPIO_Port, LEDg_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LEDf_Pin|LEDa_Pin|LEDb_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : LEDc_Pin LEDd_Pin LEDe_Pin LED1_Pin
                           LED4_Pin */
  GPIO_InitStruct.Pin = LEDc_Pin|LEDd_Pin|LEDe_Pin|LED1_Pin
                          |LED4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : BTN1_Pin BTN2_Pin */
  GPIO_InitStruct.Pin = BTN1_Pin|BTN2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pin : LEDg_Pin */
  GPIO_InitStruct.Pin = LEDg_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LEDg_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : LEDf_Pin LEDa_Pin LEDb_Pin */
  GPIO_InitStruct.Pin = LEDf_Pin|LEDa_Pin|LEDb_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) // Interrupciones
{
  if (GPIO_Pin == BTN1_Pin) {
	  leerP1 = 1;
  }
  if (GPIO_Pin == BTN2_Pin) {
	  leerP2 = 1;
  }
}



void display(int numero) {
	switch (numero) { // Según el valor enviado se accede al casa correspondiente
	                     case '0':
								HAL_GPIO_WritePin(LEDa_GPIO_Port, LEDa_Pin, GPIO_PIN_RESET);
								HAL_GPIO_WritePin(LEDb_GPIO_Port, LEDb_Pin, GPIO_PIN_RESET);
								HAL_GPIO_WritePin(LEDc_GPIO_Port, LEDc_Pin, GPIO_PIN_RESET);
								HAL_GPIO_WritePin(LEDd_GPIO_Port, LEDd_Pin, GPIO_PIN_RESET);
								HAL_GPIO_WritePin(LEDe_GPIO_Port, LEDe_Pin, GPIO_PIN_RESET);
								HAL_GPIO_WritePin(LEDf_GPIO_Port, LEDf_Pin, GPIO_PIN_RESET);
								HAL_GPIO_WritePin(LEDg_GPIO_Port, LEDg_Pin, GPIO_PIN_SET);
								break;
							case '1':
								HAL_GPIO_WritePin(LEDa_GPIO_Port, LEDa_Pin, GPIO_PIN_SET);
								HAL_GPIO_WritePin(LEDb_GPIO_Port, LEDb_Pin, GPIO_PIN_RESET);
								HAL_GPIO_WritePin(LEDc_GPIO_Port, LEDc_Pin, GPIO_PIN_RESET);
								HAL_GPIO_WritePin(LEDd_GPIO_Port, LEDd_Pin, GPIO_PIN_SET);
								HAL_GPIO_WritePin(LEDe_GPIO_Port, LEDe_Pin, GPIO_PIN_SET);
								HAL_GPIO_WritePin(LEDf_GPIO_Port, LEDf_Pin, GPIO_PIN_SET);
								HAL_GPIO_WritePin(LEDg_GPIO_Port, LEDg_Pin, GPIO_PIN_SET);
								break;
							case '2':
								HAL_GPIO_WritePin(LEDa_GPIO_Port, LEDa_Pin, GPIO_PIN_RESET);
								HAL_GPIO_WritePin(LEDb_GPIO_Port, LEDb_Pin, GPIO_PIN_RESET);
								HAL_GPIO_WritePin(LEDc_GPIO_Port, LEDc_Pin, GPIO_PIN_SET);
								HAL_GPIO_WritePin(LEDd_GPIO_Port, LEDd_Pin, GPIO_PIN_RESET);
								HAL_GPIO_WritePin(LEDe_GPIO_Port, LEDe_Pin, GPIO_PIN_RESET);
								HAL_GPIO_WritePin(LEDf_GPIO_Port, LEDf_Pin, GPIO_PIN_SET);
								HAL_GPIO_WritePin(LEDg_GPIO_Port, LEDg_Pin, GPIO_PIN_RESET);
								break;
							case '3':
								HAL_GPIO_WritePin(LEDa_GPIO_Port, LEDa_Pin, GPIO_PIN_RESET);
								HAL_GPIO_WritePin(LEDb_GPIO_Port, LEDb_Pin, GPIO_PIN_RESET);
								HAL_GPIO_WritePin(LEDc_GPIO_Port, LEDc_Pin, GPIO_PIN_RESET);
								HAL_GPIO_WritePin(LEDd_GPIO_Port, LEDd_Pin, GPIO_PIN_RESET);
								HAL_GPIO_WritePin(LEDe_GPIO_Port, LEDe_Pin, GPIO_PIN_SET);
								HAL_GPIO_WritePin(LEDf_GPIO_Port, LEDf_Pin, GPIO_PIN_SET);
								HAL_GPIO_WritePin(LEDg_GPIO_Port, LEDg_Pin, GPIO_PIN_RESET);
								break;
							case '4':
								HAL_GPIO_WritePin(LEDa_GPIO_Port, LEDa_Pin, GPIO_PIN_SET);
								HAL_GPIO_WritePin(LEDb_GPIO_Port, LEDb_Pin, GPIO_PIN_RESET);
								HAL_GPIO_WritePin(LEDc_GPIO_Port, LEDc_Pin, GPIO_PIN_RESET);
								HAL_GPIO_WritePin(LEDd_GPIO_Port, LEDd_Pin, GPIO_PIN_SET);
								HAL_GPIO_WritePin(LEDe_GPIO_Port, LEDe_Pin, GPIO_PIN_SET);
								HAL_GPIO_WritePin(LEDf_GPIO_Port, LEDf_Pin, GPIO_PIN_RESET);
								HAL_GPIO_WritePin(LEDg_GPIO_Port, LEDg_Pin, GPIO_PIN_RESET);
								break;
							case '5':
								HAL_GPIO_WritePin(LEDa_GPIO_Port, LEDa_Pin, GPIO_PIN_RESET);
								HAL_GPIO_WritePin(LEDb_GPIO_Port, LEDb_Pin, GPIO_PIN_SET);
								HAL_GPIO_WritePin(LEDc_GPIO_Port, LEDc_Pin, GPIO_PIN_RESET);
								HAL_GPIO_WritePin(LEDd_GPIO_Port, LEDd_Pin, GPIO_PIN_RESET);
								HAL_GPIO_WritePin(LEDe_GPIO_Port, LEDe_Pin, GPIO_PIN_SET);
								HAL_GPIO_WritePin(LEDf_GPIO_Port, LEDf_Pin, GPIO_PIN_RESET);
								HAL_GPIO_WritePin(LEDg_GPIO_Port, LEDg_Pin, GPIO_PIN_RESET);
								break;
							case '6':
								HAL_GPIO_WritePin(LEDa_GPIO_Port, LEDa_Pin, GPIO_PIN_RESET);
								HAL_GPIO_WritePin(LEDb_GPIO_Port, LEDb_Pin, GPIO_PIN_SET);
								HAL_GPIO_WritePin(LEDc_GPIO_Port, LEDc_Pin, GPIO_PIN_RESET);
								HAL_GPIO_WritePin(LEDd_GPIO_Port, LEDd_Pin, GPIO_PIN_RESET);
								HAL_GPIO_WritePin(LEDe_GPIO_Port, LEDe_Pin, GPIO_PIN_RESET);
								HAL_GPIO_WritePin(LEDf_GPIO_Port, LEDf_Pin, GPIO_PIN_RESET);
								HAL_GPIO_WritePin(LEDg_GPIO_Port, LEDg_Pin, GPIO_PIN_RESET);
								break;
							case '7':
								HAL_GPIO_WritePin(LEDa_GPIO_Port, LEDa_Pin, GPIO_PIN_RESET);
								HAL_GPIO_WritePin(LEDb_GPIO_Port, LEDb_Pin, GPIO_PIN_RESET);
								HAL_GPIO_WritePin(LEDc_GPIO_Port, LEDc_Pin, GPIO_PIN_RESET);
								HAL_GPIO_WritePin(LEDd_GPIO_Port, LEDd_Pin, GPIO_PIN_SET);
								HAL_GPIO_WritePin(LEDe_GPIO_Port, LEDe_Pin, GPIO_PIN_SET);
								HAL_GPIO_WritePin(LEDf_GPIO_Port, LEDf_Pin, GPIO_PIN_SET);
								HAL_GPIO_WritePin(LEDg_GPIO_Port, LEDg_Pin, GPIO_PIN_SET);
								break;
							case '8':
								HAL_GPIO_WritePin(LEDa_GPIO_Port, LEDa_Pin, GPIO_PIN_RESET);
								HAL_GPIO_WritePin(LEDb_GPIO_Port, LEDb_Pin, GPIO_PIN_RESET);
								HAL_GPIO_WritePin(LEDc_GPIO_Port, LEDc_Pin, GPIO_PIN_RESET);
								HAL_GPIO_WritePin(LEDd_GPIO_Port, LEDd_Pin, GPIO_PIN_RESET);
								HAL_GPIO_WritePin(LEDe_GPIO_Port, LEDe_Pin, GPIO_PIN_RESET);
								HAL_GPIO_WritePin(LEDf_GPIO_Port, LEDf_Pin, GPIO_PIN_RESET);
								HAL_GPIO_WritePin(LEDg_GPIO_Port, LEDg_Pin, GPIO_PIN_RESET);
								break;
							case '9':
								HAL_GPIO_WritePin(LEDa_GPIO_Port, LEDa_Pin, GPIO_PIN_RESET);
								HAL_GPIO_WritePin(LEDb_GPIO_Port, LEDb_Pin, GPIO_PIN_RESET);
								HAL_GPIO_WritePin(LEDc_GPIO_Port, LEDc_Pin, GPIO_PIN_RESET);
								HAL_GPIO_WritePin(LEDd_GPIO_Port, LEDd_Pin, GPIO_PIN_RESET);
								HAL_GPIO_WritePin(LEDe_GPIO_Port, LEDe_Pin, GPIO_PIN_SET);
								HAL_GPIO_WritePin(LEDf_GPIO_Port, LEDf_Pin, GPIO_PIN_RESET);
								HAL_GPIO_WritePin(LEDg_GPIO_Port, LEDg_Pin, GPIO_PIN_RESET);
								break;
							case 'A':
								HAL_GPIO_WritePin(LEDa_GPIO_Port, LEDa_Pin, GPIO_PIN_RESET);
								HAL_GPIO_WritePin(LEDb_GPIO_Port, LEDb_Pin, GPIO_PIN_RESET);
								HAL_GPIO_WritePin(LEDc_GPIO_Port, LEDc_Pin, GPIO_PIN_RESET);
								HAL_GPIO_WritePin(LEDd_GPIO_Port, LEDd_Pin, GPIO_PIN_SET);
								HAL_GPIO_WritePin(LEDe_GPIO_Port, LEDe_Pin, GPIO_PIN_RESET);
								HAL_GPIO_WritePin(LEDf_GPIO_Port, LEDf_Pin, GPIO_PIN_RESET);
								HAL_GPIO_WritePin(LEDg_GPIO_Port, LEDg_Pin, GPIO_PIN_RESET);
								break;
							case 'B':
								HAL_GPIO_WritePin(LEDa_GPIO_Port, LEDa_Pin, GPIO_PIN_RESET);
								HAL_GPIO_WritePin(LEDb_GPIO_Port, LEDb_Pin, GPIO_PIN_RESET);
								HAL_GPIO_WritePin(LEDc_GPIO_Port, LEDc_Pin, GPIO_PIN_RESET);
								HAL_GPIO_WritePin(LEDd_GPIO_Port, LEDd_Pin, GPIO_PIN_RESET);
								HAL_GPIO_WritePin(LEDe_GPIO_Port, LEDe_Pin, GPIO_PIN_RESET);
								HAL_GPIO_WritePin(LEDf_GPIO_Port, LEDf_Pin, GPIO_PIN_RESET);
								HAL_GPIO_WritePin(LEDg_GPIO_Port, LEDg_Pin, GPIO_PIN_RESET);
								break;
							case 'C':
								HAL_GPIO_WritePin(LEDa_GPIO_Port, LEDa_Pin, GPIO_PIN_RESET);
								HAL_GPIO_WritePin(LEDb_GPIO_Port, LEDb_Pin, GPIO_PIN_SET);
								HAL_GPIO_WritePin(LEDc_GPIO_Port, LEDc_Pin, GPIO_PIN_SET);
								HAL_GPIO_WritePin(LEDd_GPIO_Port, LEDd_Pin, GPIO_PIN_RESET);
								HAL_GPIO_WritePin(LEDe_GPIO_Port, LEDe_Pin, GPIO_PIN_RESET);
								HAL_GPIO_WritePin(LEDf_GPIO_Port, LEDf_Pin, GPIO_PIN_RESET);
								HAL_GPIO_WritePin(LEDg_GPIO_Port, LEDg_Pin, GPIO_PIN_SET);
								break;
							case 'D':
								HAL_GPIO_WritePin(LEDa_GPIO_Port, LEDa_Pin, GPIO_PIN_RESET);
								HAL_GPIO_WritePin(LEDb_GPIO_Port, LEDb_Pin, GPIO_PIN_RESET);
								HAL_GPIO_WritePin(LEDc_GPIO_Port, LEDc_Pin, GPIO_PIN_RESET);
								HAL_GPIO_WritePin(LEDd_GPIO_Port, LEDd_Pin, GPIO_PIN_RESET);
								HAL_GPIO_WritePin(LEDe_GPIO_Port, LEDe_Pin, GPIO_PIN_RESET);
								HAL_GPIO_WritePin(LEDf_GPIO_Port, LEDf_Pin, GPIO_PIN_RESET);
								HAL_GPIO_WritePin(LEDg_GPIO_Port, LEDg_Pin, GPIO_PIN_SET);
								break;
							case 'E':
								HAL_GPIO_WritePin(LEDa_GPIO_Port, LEDa_Pin, GPIO_PIN_RESET);
								HAL_GPIO_WritePin(LEDb_GPIO_Port, LEDb_Pin, GPIO_PIN_SET);
								HAL_GPIO_WritePin(LEDc_GPIO_Port, LEDc_Pin, GPIO_PIN_SET);
								HAL_GPIO_WritePin(LEDd_GPIO_Port, LEDd_Pin, GPIO_PIN_RESET);
								HAL_GPIO_WritePin(LEDe_GPIO_Port, LEDe_Pin, GPIO_PIN_RESET);
								HAL_GPIO_WritePin(LEDf_GPIO_Port, LEDf_Pin, GPIO_PIN_RESET);
								HAL_GPIO_WritePin(LEDg_GPIO_Port, LEDg_Pin, GPIO_PIN_RESET);
								break;
							case 'F':
								HAL_GPIO_WritePin(LEDa_GPIO_Port, LEDa_Pin, GPIO_PIN_RESET);
								HAL_GPIO_WritePin(LEDb_GPIO_Port, LEDb_Pin, GPIO_PIN_SET);
								HAL_GPIO_WritePin(LEDc_GPIO_Port, LEDc_Pin, GPIO_PIN_SET);
								HAL_GPIO_WritePin(LEDd_GPIO_Port, LEDd_Pin, GPIO_PIN_SET);
								HAL_GPIO_WritePin(LEDe_GPIO_Port, LEDe_Pin, GPIO_PIN_RESET);
								HAL_GPIO_WritePin(LEDf_GPIO_Port, LEDf_Pin, GPIO_PIN_RESET);
								HAL_GPIO_WritePin(LEDg_GPIO_Port, LEDg_Pin, GPIO_PIN_RESET);
								break;
		 		 			default:
		 		 				break;
	}
}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
